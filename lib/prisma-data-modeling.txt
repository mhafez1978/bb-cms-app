generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum ProjectState {
  PLANNING_PHASE
  IN_PROGRESS
  PROJECT_ON_HOLD
  REQUIRES_ESCALATION
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  BLOCKED
  CANCELED
}

enum ReportType {
  SALES
  INVENTORY
  PERFORMANCE
  ACTIVITY
  CUSTOM
}


enum User_country {
  afghanistan
  albania
  algeria
  andorra
  angola
  antigua_and_barbuda
  argentina
  armenia
  australia
  austria
  azerbaijan
  bahamas
  bahrain
  bangladesh
  barbados
  belarus
  belgium
  belize
  benin
  bhutan
  bolivia
  bosnia_and_herzegovina
  botswana
  brazil
  brunei
  bulgaria
  burkina_faso
  burundi
  cabo_verde
  cambodia
  cameroon
  canada
  central_african_republic
  chad
  chile
  china
  colombia
  comoros
  republic_of_the_congo_democratic
  republic_of_the_congo
  costa_rica
  croatia
  cuba
  cyprus
  czech_republic
  denmark
  djibouti
  dominica
  dominican_republic
  ecuador
  egypt
  el_salvador
  equatorial_guinea
  eritrea
  estonia
  eswatini
  ethiopia
  fiji
  finland
  france
  gabon
  gambia
  georgia
  germany
  ghana
  greece
  grenada
  guatemala
  guinea
  guinea_bissau
  guyana
  haiti
  holy_see
  honduras
  hungary
  iceland
  india
  indonesia
  iran
  iraq
  ireland
  israel
  italy
  jamaica
  japan
  jordan
  kazakhstan
  kenya
  kiribati
  north_korea
  south_korea
  kuwait
  kyrgyzstan
  laos
  latvia
  lebanon
  lesotho
  liberia
  libya
  liechtenstein
  lithuania
  luxembourg
  madagascar
  malawi
  malaysia
  maldives
  mali
  malta
  marshall_islands
  mauritania
  mauritius
  mexico
  micronesia
  moldova
  monaco
  mongolia
  montenegro
  morocco
  mozambique
  myanmar
  namibia
  nauru
  nepal
  netherlands
  new_zealand
  nicaragua
  niger
  nigeria
  north_macedonia
  norway
  oman
  pakistan
  palau
  palestine
  panama
  papua_new_guinea
  paraguay
  peru
  philippines
  poland
  portugal
  qatar
  romania
  russia
  rwanda
  saint_kitts_and_nevis
  saint_lucia
  saint_vincent_and_the_grenadines
  samoa
  san_marino
  sao_tome_and_principe
  saudi_arabia
  senegal
  serbia
  seychelles
  sierra_leone
  singapore
  slovakia
  slovenia
  solomon_islands
  somalia
  south_africa
  south_sudan
  spain
  sri_lanka
  sudan
  suriname
  sweden
  switzerland
  syria
  tajikistan
  tanzania
  thailand
  timor_leste
  togo
  tonga
  trinidad_and_tobago
  tunisia
  turkey
  turkmenistan
  tuvalu
  uganda
  ukraine
  united_arab_emirates
  united_kingdom
  united_states
  uruguay
  uzbekistan
  vanuatu
  venezuela
  vietnam
  yemen
  zambia
  zimbabwe
}

enum User_state {
  alabama
  alaska
  arizona
  arkansas
  california
  colorado
  connecticut
  delaware
  florida
  georgia
  hawaii
  idaho
  illinois
  indiana
  iowa
  kansas
  kentucky
  louisiana
  maine
  maryland
  massachusetts
  michigan
  minnesota
  mississippi
  missouri
  montana
  nebraska
  nevada
  new_hampshire
  new_jersey
  new_mexico
  new_york
  north_carolina
  north_dakota
  ohio
  oklahoma
  oregon
  pennsylvania
  rhode_island
  south_carolina
  south_dakota
  tennessee
  texas
  utah
  vermont
  virginia
  washington
  west_virginia
  wisconsin
  wyoming
}




model User {
  id        String   @id @default(cuid())
  active    Boolean  @default(false)
  role      Role     @default(USER)
  firstName String?  @db.VarChar(255)
  lastName  String?  @db.VarChar(255)
  fullName  String?  @db.VarChar(255)
  phone     String?  @db.VarChar(50)
  username  String   @unique
  email     String   @unique
  password  String   @db.VarChar(255)
  addressLine1  String?  @db.VarChar(255)
  addressLine2  String?  @db.VarChar(255)
  city  String?  @db.VarChar(255)
  state         User_state?
  zipcode  String?  @db.VarChar(255)
  country       User_country?
  notes      String?


  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])

  employee  Employee?

  assignedTasks     Task[] @relation("AssignedTasks")
  createdTasks      Task[] @relation("CreatedTasks")
  createdOrders     Order[] @relation("OrderCreator")
  approvedOrders    Order[] @relation("OrderApprover")
  approvedInvoices  Invoice[] @relation("InvoiceApprover")

  Account       Account[]
  AppAccessLog  AppAccessLog[]
  Session       Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model AppAccessLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  timestamp DateTime
  provider  String
  eventType String
  email     String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Company {
  id         String     @id @default(cuid())
  name       String
  description  String?
  phone      String?
  website    String?
  email      String?
  poc        String?
  addressLine1  String?
  addressLine2  String?
  city       String?
  state      String?
  zipcode    String?
  country    String?
  notes      String?

  users      User[]
  employees  Employee[]
  customers  Customer[]
  products   Product[]
  projects   Project[]
  orders     Order[]
  invoices   Invoice[]
  reports    Report[]

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Employee {
  id         String   @id @default(cuid())
  name       String
  title      String?

  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  notes      String?

  companyId  String
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([companyId])
}

model Customer {
  id           String    @id @default(cuid())
  name         String
  email        String?
  phone        String?
  addressLine1 String?
  addressLine2 String?
  city         String?
  state        String?
  zipcode      String?
  country      String?
  notes        String?

  companyId    String
  company      Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  projects     Project[]
  orders       Order[]
  invoices     Invoice[]  // ðŸ‘ˆ Now tracks invoices too

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([companyId])
}


model Project {
  id           String        @id @default(cuid())
  name         String
  description  String?
  state        ProjectState  @default(PLANNING_PHASE)

  startDate    DateTime?
  endDate      DateTime?
  notes      String?

  companyId    String
  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)

  customerId   String?
  customer     Customer?     @relation(fields: [customerId], references: [id], onDelete: SetNull)

  createdById  String?
  createdBy    User?         @relation(fields: [createdById], references: [id], onDelete: SetNull)

  managerId    String?
  manager      User?         @relation(fields: [managerId], references: [id], onDelete: SetNull)

  orders       Order[]
  tasks        Task[]

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?

  @@index([companyId])
}


model Task {
  id           String      @id @default(cuid())
  title        String
  description  String?
  status       TaskStatus  @default(TODO)
  notes      String?

  projectId    String
  project      Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)

  assignedToId String?
  assignedTo   User?       @relation("AssignedTasks", fields: [assignedToId], references: [id], onDelete: SetNull)

  createdById  String
  createdBy    User        @relation("CreatedTasks", fields: [createdById], references: [id], onDelete: Cascade)

  dueDate      DateTime?
  priority     Int?        // Optional: priority or sort order

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}


model Product {
  id          String     @id @default(cuid())
  name        String
  description String?
  quantity    Int        @default(0)
  price       Float      @default(0.0)
  notes      String?

  companyId   String
  company     Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)

  orderItems  OrderItem[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([companyId])
}

model Order {
  id            String      @id @default(cuid())

  companyId     String
  company       Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)

  customerId    String
  customer      Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)

  projectId     String?
  project       Project?    @relation(fields: [projectId], references: [id], onDelete: SetNull)

  createdById   String?
  createdBy     User?       @relation("OrderCreator", fields: [createdById], references: [id], onDelete: SetNull)

  approvedById  String?
  approvedBy    User?       @relation("OrderApprover", fields: [approvedById], references: [id], onDelete: SetNull)

  approvedAt    DateTime?

  items         OrderItem[]
  invoice       Invoice?
  notes      String?

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([companyId, customerId])
}


model OrderItem {
  id           String   @id @default(cuid())

  orderId      String
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId    String
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  notes      String?
  quantity     Int
  priceAtOrder Float    // snapshot of product price at time of ordering
  lineTotal    Float    // calculated = quantity * priceAtOrder

  addedById    String?
  addedBy      User?    @relation(fields: [addedById], references: [id], onDelete: SetNull)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}


model Invoice {
  id            String   @id @default(cuid())

  orderId       String   @unique
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  customerId    String?
  customer      Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  projectId     String?
  project       Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)

  amount        Float
  dueDate       DateTime
  paid          Boolean  @default(false)
  notes         String?

  approvedById  String?
  approvedBy    User?    @relation("InvoiceApprover", fields: [approvedById], references: [id], onDelete: SetNull)

  // Optional snapshot (can still keep this for display speed or historical consistency)
  customerName  String?
  customerEmail String?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}




model Report {
  id           String      @id @default(cuid())
  name         String
  description  String?     @db.VarChar(1000)
  reportType   ReportType  @default(CUSTOM)
  data         Json

  companyId    String
  company      Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdById  String?
  createdBy    User?       @relation(fields: [createdById], references: [id], onDelete: SetNull)

  archived     Boolean     @default(false)
  deletedAt    DateTime?

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([companyId])
}

